---

- name: Create a Hortonworks Ambari deployment
  hosts: localhost
  vars_files:
    - vars.yaml
  tasks:
  - name: Create volumes
    os_volume:
      auth:
        auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
        username: "{{ lookup('env', 'OS_USERNAME') }}"
        password: "{{ lookup('env', 'OS_PASSWORD') }}"
        project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
      display_name: "{{ item }}"
      size: "{{ volsize }}"
    with_items:
      - "ambari-master-vol"
      - "ambari-data1-vol"
      - "ambari-data2-vol"
  - name: test for presence of local keypair
    stat: path="id_rsa_ambari"
    register: testenv_keypair_local
  
  - name: delete remote keypair
    os_keypair:
      name: "ambarikey"
      state: absent
    when: not testenv_keypair_local.stat.exists
  
  - name: create the keypair
    os_keypair:
      name: "ambarikey"
      state: present
    register: testenv_keypair
  
  - name: persist the keypair
    copy:
      dest: "./id_rsa_ambari"
      content: "{{ testenv_keypair.key.private_key }}"
      mode: 0600
    when: testenv_keypair.changed

  - name: launch an instance
    os_server:
      name: "{{ item }}"
      state: present
      auth:
        auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
        username: "{{ lookup('env', 'OS_USERNAME') }}"
        password: "{{ lookup('env', 'OS_PASSWORD') }}"
        project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
      image: "{{image}}"
      security_groups: "{{secgroups}}"
      flavor: "{{flavor}}"
      #key_name: "{{key_name}}"
      key_name: "ambarikey"
      nics:
        - net-name: "{{net_name}}"
      volumes:
        - "{{item}}-vol"
      wait: yes
    register: osinstance
    with_items:
      - "ambari-master"
      - "ambari-data1"
      - "ambari-data2"   
  
  - name: Wait 15 seconds
    pause: seconds=15
    when: osinstance.changed
  
  - name: Add new ambari-master VM to hosts file for Ansible
    shell: nova show ambari-master | awk 'FNR == 37 {print $5}' | gawk 'BEGIN { RS=",[\t\n\v\f\r ]*[\n\r]+" } { printf("%s%s", nl, $0) ; nl=RT } END { sub(/^\,/, "", nl); printf("%s", nl) }'

    register: shell_output2
  - debug: msg="{{ shell_output2.stdout }}"
  - lineinfile:
       dest: hosts.txt
       line: ' {{ shell_output2.stdout }} ambari-master '
       insertafter: EOF
  - lineinfile:
       dest: ambari-master
       line: ' {{ shell_output2.stdout }} '
       insertafter: EOF

  - name: Add new ambari-data1 VM to hosts file for Ansible
    shell: nova show ambari-data1 | awk 'FNR == 37 {print $5}' | gawk 'BEGIN { RS=",[\t\n\v\f\r ]*[\n\r]+" } { printf("%s%s", nl, $0) ; nl=RT } END { sub(/^\,/, "", nl); printf("%s", nl) }'

    register: shell_output3
  - debug: msg="{{ shell_output3.stdout }}"
  - lineinfile:
       dest: hosts.txt
       line: ' {{ shell_output3.stdout }} ambari-data1 '
       insertafter: EOF
  - lineinfile:
       dest: ambari-data1
       line: ' {{ shell_output3.stdout }} '
       insertafter: EOF

  - name: Add new ambari-data2 VM to hosts file for Ansible
    shell: nova show ambari-data2 | awk 'FNR == 37 {print $5}' | gawk 'BEGIN { RS=",[\t\n\v\f\r ]*[\n\r]+" } { printf("%s%s", nl, $0) ; nl=RT } END { sub(/^\,/, "", nl); printf("%s", nl) }'

    register: shell_output4
  - debug: msg="{{ shell_output4.stdout }}"
  - lineinfile:
       dest: hosts.txt
       line: ' {{ shell_output4.stdout }} ambari-data2 '
       insertafter: EOF
  - lineinfile:
       dest: ambari-data2
       line: ' {{ shell_output4.stdout }} '
       insertafter: EOF
